import os, asyncio, textwrap, re
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
import httpx

API_BASE = os.getenv("API_BASE", "http://api:8000")
TOKEN = os.getenv("TELEGRAM_TOKEN")

HELP = textwrap.dedent(
    """\ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å—Ä–∞–≤–Ω–∏—Ç—å 2 –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û: ‚Ä¢ ¬´–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª (ai) ‚Ä¢ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò‚Äë–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏¬ª (ai_product) –ö–æ–º–∞–Ω–¥—ã: - /ai —Ç–µ–∫—Å—Ç_–≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò–ò - /aip —Ç–µ–∫—Å—Ç_–≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ AI Product - /rec_ai –≤–∞—à_–±—ç–∫–≥—Ä–∞—É–Ω–¥ ‚Äî –ø–æ–¥–±–æ—Ä —ç–ª–µ–∫—Ç–∏–≤–æ–≤ (–ò–ò) - /rec_aip –≤–∞—à_–±—ç–∫–≥—Ä–∞—É–Ω–¥ ‚Äî –ø–æ–¥–±–æ—Ä —ç–ª–µ–∫—Ç–∏–≤–æ–≤ (AI Product) –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–∏–º –¥–≤—É–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º. """
)

dp = Dispatcher()


@dp.message(F.text.regexp(r"^/(start|help)$"))
async def help_msg(m: Message):
    await m.answer(HELP)


async def call_api(
    endpoint: str, program: str, query: str, background: str | None = None
):
    async with httpx.AsyncClient(timeout=60) as cx:
        r = await cx.post(
            f"{API_BASE}{endpoint}",
            json={"query": query, "program": program, "background": background},
        )
        r.raise_for_status()
        return r.json()


# üëá –¥–∞—ë–º –∏–º—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–µ–≥—ç–∫—Å–∞ —á–µ—Ä–µ–∑ .as_("rx")
@dp.message(F.text.regexp(r"^/ai\s+(.+)$").as_("rx"))
async def ask_ai(m: Message, rx: re.Match):
    q = rx.group(1)
    res = await call_api("/ask", "ai", q)
    await m.answer(res["answer"])


@dp.message(F.text.regexp(r"^/aip\s+(.+)$").as_("rx"))
async def ask_aip(m: Message, rx: re.Match):
    q = rx.group(1)
    res = await call_api("/ask", "ai_product", q)
    await m.answer(res["answer"])


@dp.message(F.text.regexp(r"^/rec_ai\s+(.+)$").as_("rx"))
async def rec_ai(m: Message, rx: re.Match):
    bg = rx.group(1)
    res = await call_api("/recommend", "ai", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–ª–µ–∫—Ç–∏–≤–∞–º", bg)
    await m.answer(res["answer"])


@dp.message(F.text.regexp(r"^/rec_aip\s+(.+)$").as_("rx"))
async def rec_aip(m: Message, rx: re.Match):
    bg = rx.group(1)
    res = await call_api("/recommend", "ai_product", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–ª–µ–∫—Ç–∏–≤–∞–º", bg)
    await m.answer(res["answer"])


@dp.message()
async def fallback(m: Message):
    await m.answer(
        "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º ¬´–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª –∏ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏¬ª. –ù–∞–±–µ—Ä–∏—Ç–µ /help"
    )


async def main():
    bot = Bot(token=TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
